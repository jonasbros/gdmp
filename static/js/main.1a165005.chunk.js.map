{"version":3,"sources":["loader.gif","GoogleAPI/Auth.js","components/Player.js","components/Intro.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GoogleAuth","props","response","console","log","state","clientId","buttonText","onSuccess","this","onFailure","cookiePolicy","isSignedIn","theme","scope","React","Component","Player","fetchAudio","gdrive","userData","accessToken","files","list","q","maxResults","callback","err","body","setState","isLoading","audioFiles","JSON","parse","audiofiles","items","concat","playlist","tmp_list","map","i","key","className","onClick","play","bind","item","title","nextPageToken","fetchAudioNextPage","highlightNowPlaying","prevID","newID","playlistItems","document","querySelectorAll","classList","remove","add","toggleShuffle","isShuffled","toggleRepeat","isRepeat","togglePlay","audioRef","current","paused","updateSeeker","pause","stopSeeker","changeVolume","newVolume","volumeRef","value","volume","userSeek","newTime","seekerRef","duration","currentTime","seekerInterval","setInterval","clearInterval","next","shuffle","nowPlaying","id","length","prev","shuffle_index","Math","floor","random","audio","link","webContentLink","replace","isPaused","oncanplay","onended","createRef","onpause","onplay","pageToken","ref","onChange","type","min","max","step","disabled","hidden","controls","autoPlay","loop","src","style","display","loaderGif","Intro","href","App","logout","content","height","onLogoutSuccess","Auth","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1a165005.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.59158615.gif\";","import React from 'react';\n\nimport { GoogleLogin } from 'react-google-login';\n\nclass GoogleAuth extends React.Component{\n    constructor(props) {\n        super(props);\n\n        this.state = { response: null };\n    }\n\n    response = (response) => {\n        console.log(response);\n        this.props.response(response);\n    }\n\n    render() {\n        return (\n            <GoogleLogin\n                clientId=\"61296320304-4mrg5qmerjt2ejamn22e1a7ti9t5bo9b.apps.googleusercontent.com\"\n                buttonText=\"Sign in with Google\"\n                onSuccess={this.response}\n                onFailure={this.response}\n                cookiePolicy={'single_host_origin'}\n                isSignedIn={true}\n                theme=\"dark\"\n                scope=\"https://www.googleapis.com/auth/drive\"\n                />            \n        );\n    }\n}\n\nexport default GoogleAuth;\n","import React from 'react';\nimport gdrive from 'google-drive';\nimport loaderGif from './../loader.gif';\n\nclass Player extends React.Component{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            audiofiles: null,\n            playlist: <span className=\"has-text-light\">Looking for audio...</span>,\n            audio: '',\n            nowPlaying: {\n                id: null,\n                title: '',\n                link: '',\n            }, \n            isPaused: true,\n            isShuffled: false,\n            isRepeat: false,\n            isLoading: true,\n            duration: 0,\n            currentTime: 0,\n            volume: 0.5,\n        };\n\n        this.audioRef = React.createRef();\n        this.seekerRef = React.createRef();\n        this.volumeRef = React.createRef();\n\n        this.seekerInterval = null;\n        \n    } \n\n    componentDidMount() {\n        // get all files\n        this.fetchAudio();\n        this.audioRef.current.onpause = () => {\n            this.setState({isPaused: this.audioRef.current.paused});\n        } \n\n        this.audioRef.current.onplay = () => {\n            this.setState({isPaused: this.audioRef.current.paused});\n        }\n    }\n\n    fetchAudio = () => {\n        gdrive(this.props.userData.accessToken).files().list({\n            q: \"mimeType contains 'audio/'\",\n            maxResults: 999\n        }, this.callback);\n    }\n\n    fetchAudioNextPage(pageToken) {\n        gdrive(this.props.userData.accessToken).files().list({\n            q: \"mimeType contains 'audio/'\",\n            maxResults: 999,\n            pageToken: pageToken\n        }, this.callback);\n    }\n\n    callback = (err, response, body) => {\n        if (err) return console.log('err', err);\n        this.setState({ isLoading: true });\n\n        let audioFiles = null;\n        \n        body = JSON.parse(body);\n        if( this.state.audiofiles === null ) {\n            audioFiles = body.items;  \n        }else {\n            audioFiles = this.state.audiofiles;\n            audioFiles = audioFiles.concat(body.items);\n        }        \n\n        if( this.state.audiofiles === null ) {\n            this.setState({ playlist: <span>No audio files found...</span> });\n        }\n\n        let tmp_list = ( audioFiles.map((i, key) => (\n            <p key={key} className=\"playlist-item\" onClick={this.play.bind(this, { key: key, item: i })}>{i.title}</p>\n        )) ); \n\n        this.setState({ audiofiles: audioFiles, playlist: tmp_list });  \n        if( body.nextPageToken ) {\n            this.fetchAudioNextPage(body.nextPageToken);\n        }else {\n            this.setState({ isLoading: false });\n        }\n    }\n\n    highlightNowPlaying = (prevID, newID) => {        \n        let playlistItems = document.querySelectorAll('.playlist-item');\n\n        if( prevID !== null ) {\n            playlistItems[prevID].classList.remove('is-playing');\n        }\n        playlistItems[newID].classList.add('is-playing');\n    }\n\n    toggleShuffle = () => {\n        this.setState({ isShuffled: !this.state.isShuffled });\n    }\n\n    toggleRepeat = () => {\n        this.setState({ isRepeat: !this.state.isRepeat });\n    }\n\n    togglePlay = () => {\n        if( this.audioRef.current.paused ) {\n            this.audioRef.current.play();\n            this.updateSeeker();\n        }else {\n            this.audioRef.current.pause();\n            this.stopSeeker();\n        }\n    }\n\n    changeVolume = () => {\n        let newVolume = this.volumeRef.current.value;\n        this.audioRef.current.volume = newVolume;\n        this.setState({ volume: newVolume });\n    }\n\n    userSeek = () => {\n        let newTime = this.seekerRef.current.value * this.audioRef.current.duration;\n        this.audioRef.current.currentTime = newTime;\n    }\n\n    updateSeeker = () => {    \n        this.seekerInterval = setInterval(() => { \n            this.setState({ currentTime: this.audioRef.current.currentTime / this.audioRef.current.duration });\n        }, 1000);\n\n        const seekerInterval = this.seekerInterval;\n\n        this.setState({ seekerInterval });\n    }\n \n    stopSeeker = () => {\n        clearInterval(this.seekerInterval);        \n    }\n\n    //todo PREVIOUS and NEXT buttons\n    next = () => {               \n        if( this.state.isShuffled ) {\n            this.shuffle();\n        }else if( this.state.nowPlaying.id < this.state.audiofiles.length ) {\n            this.play({ key: this.state.nowPlaying.id + 1, item: this.state.audiofiles[this.state.nowPlaying.id + 1]});\n        }\n    } \n\n    prev = () => {        \n        if( this.state.isShuffled ) {\n            this.shuffle();\n        }else if( this.state.nowPlaying.id > 0 ) {\n            this.play({ key: this.state.nowPlaying.id - 1, item: this.state.audiofiles[this.state.nowPlaying.id - 1]});\n        }\n    }\n\n    shuffle = () => {\n        let shuffle_index = Math.floor((Math.random() * (this.state.audiofiles.length - 1)) + 0);\n        this.play({ key: shuffle_index, item: this.state.audiofiles[shuffle_index] });\n    }\n\n    play = (audio) => {\n        let prevID = this.state.nowPlaying.id;\n        this.stopSeeker();\n\n        let link = audio.item.webContentLink.replace('&export=download', '');\n        this.setState({ \n            nowPlaying: {\n                id: audio.key,\n                title: audio.item.title,\n                link: link,\n            },\n            isPaused: true, \n        }, () => {\n            this.highlightNowPlaying(prevID, audio.key);\n\n            this.audioRef.current.oncanplay = () => {\n                this.audioRef.current.play();             \n                this.updateSeeker();     \n            }  \n            \n            this.audioRef.current.onended = () => {    \n                this.next();\n            }\n        });       \n    }\n\n    render() {       \n        return (\n            <div className=\"player__container columns is-vcentered is-centered is-multiline\">\n                <div className=\"player__inner\">\n                    <div className=\"player__player\">\n                        <div className=\"player__header\">\n                            <h3 className=\"has-text-info\">Now Playing</h3>\n                            <p>{ this.state.nowPlaying.id !== null ? this.state.nowPlaying.title : 'No Song' }</p>\n                            <div onClick={this.prev} className=\"player__prevnext player__prev-btn\">\n                                <i className=\"fas fa-step-backward\"></i>\n                            </div>\n                            <div onClick={this.next} className=\"player__prevnext player__next-btn\">\n                                <i className=\"fas fa-step-forward\"></i>\n                            </div>\n                        </div>\n                        \n                        <div className=\"player__player-controls\">\n                            <div className=\"play-pause__btn\" onClick={this.togglePlay}>\n                                <i className={(this.state.isPaused ? \"fas fa-play\" : \"fas fa-pause\")}></i>                                \n                            </div>\n                            <div className=\"shuffle__btn\" onClick={this.toggleShuffle}>\n                                <i className={\"fas fa-random \" + (this.state.isShuffled ? \"has-text-info\" : \"\")}></i>                                \n                            </div>\n                            <div className=\"repeat__btn\" onClick={this.toggleRepeat}>\n                                <i className={\"fas fa-infinity \" + (this.state.isRepeat ? \"has-text-info\" : \"\")}></i>                                \n                            </div>  \n                            \n                            <div className=\"volume__control\">\n                                <input \n                                    ref={this.volumeRef}\n                                    onChange={this.changeVolume}\n                                    id=\"volume\"\n                                    type=\"range\"\n                                    min=\"0\"\n                                    max=\"1\"\n                                    step=\"0.01\"\n                                    value={this.state.volume}\n                                    disabled={this.state.nowPlaying.id === null ? true : false}\n                                />\n                            </div>\n\n                            <div className=\"seeker__control\">\n                                <input \n                                    ref={this.seekerRef}\n                                    onChange={this.userSeek}\n                                    id=\"seeker\"\n                                    type=\"range\"\n                                    min=\"0\"\n                                    max=\"1\"\n                                    step=\"0.01\"\n                                    value={this.state.currentTime}\n                                    disabled={this.state.nowPlaying.id === null ? true : false}\n                                />\n                            </div>\n                        </div>\n                        \n                        <audio\n                            hidden\n                            controls\n                            autoPlay\n                            volume=\"0.5\"\n                            loop={ this.state.isRepeat ? true : false }\n                            ref={this.audioRef}\n                            src={ this.state.nowPlaying.link }                            \n                        >\n                                Your browser does not support the\n                                <code>audio</code> element.\n                        </audio>                        \n                    </div>\n\n                    <div className=\"player__playlist\"> \n                        <div className=\"player__playlist-inner has-background-light\">\n                            <div style={{display: this.state.isLoading ? 'none' : 'block'}}>\n                                { this.state.playlist }\n                            </div>\n                            \n                            <div className={this.state.isLoading ? \"loader-gif active\" : \"loader-gif\"}>\n                                <img src={loaderGif} />\n                            </div>\n                        </div>      \n                    </div>\n                </div>                               \n            </div> \n        );\n    }\n}\n\nexport default Player;\n","import React from 'react';\n\nclass Intro extends React.Component{\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <div className=\"intro__text\"> \n                <h1 className=\"has-text-info\">Google Drive Music Player</h1>\n                <p>A music player for Google Drive that finds all audio files in your drive and compiles them to a single playlist.</p>\n                <p><a href=\"https://jonasbros.github.io/dbxmp\">DBXMP</a>'s big brother.</p>\n            </div> \n        );\n    }\n}\n\nexport default Intro;\n","import React from 'react';\nimport './App.css';\n\nimport Auth from './GoogleAPI/Auth';\nimport Player from './components/Player';\nimport Intro from './components/Intro';\n\nimport { GoogleLogout } from 'react-google-login';\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            response: { accessToken: null },\n        };\n    }\n    \n    response = (response) => {\n        this.setState({response: response});\n    }\n\n    logout = (response) => {\n        this.setState({ response: { accessToken: null } });\n    }\n    render() {\n        \n        let content;\n        \n        if( this.state.response.accessToken ) { \n            //if logged in\n            content = (                        \n                <div style={{height: '100%'}}>\n                    <Player userData={this.state.response} />\n                    <GoogleLogout\n                    clientId=\"61296320304-4mrg5qmerjt2ejamn22e1a7ti9t5bo9b.apps.googleusercontent.com\"\n                    buttonText=\"Logout\"\n                    onLogoutSuccess={this.logout}\n                    > \n                    </GoogleLogout>\n                </div>\n            )                        \n        }else {\n            content = (            \n                <div className=\"intro__container columns is-vcentered is-centered\">    \n                    <div className=\"column is-half\">\n                        <div className=\"intro__inner\">\n                            <Intro />\n                            <Auth response={this.response}/>\n                        </div>   \n                    </div>                                      \n                </div>         \n            )\n        }\n        \n        return (\n            <div className=\"App container is-fluid\">         \n                {content}                             \n            </div>\n        );\n    } // render\n} // class\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}